import json
import boto3

# Initialize the Bedrock Runtime client and S3 client
bedrock_runtime = boto3.client("bedrock-runtime")
s3_client = boto3.client("s3")

MODEL_ID = "us.meta.llama3-2-90b-instruct-v1:0"

def lambda_handler(event, context):
    # Log the incoming event for debugging
    print("Received event:", json.dumps(event))

    # Parse the body of the event
    body = json.loads(event['body'])
    s3_arn = body.get('s3_arn')
    user_message = body.get('user_message')
    subject = body.get('subject')

    # Check if s3_arn and subject are provided
    if not s3_arn:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': 's3_arn is required'})
        }
    if not subject:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': 'subject is required'})
        }

    # Parse the bucket name and object key from the ARN
    parts = s3_arn.split(':')
    if len(parts) == 6:
        bucket_name = parts[5].split('/')[0]
        object_key = '/'.join(parts[5].split('/')[1:])
    else:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': 'Invalid ARN format'})
        }

    # Read the image from S3
    response = s3_client.get_object(Bucket=bucket_name, Key=object_key)
    image = response['Body'].read()

    # Prepare the messages for the Bedrock request
    messages = [
        {
            "role": "user",
            "content": [
                {"image": {"format": "png", "source": {"bytes": image}}},
                {"text": f"Is this image related to the subject '{subject}'? If yes, provide a brief description. If no, say 'image is not related to subject'."},
            ],
        }
    ]

    # Send the request to Bedrock
    response = bedrock_runtime.converse(
        modelId=MODEL_ID,
        messages=messages,
    )

    # Extract the response text
    response_text = response["output"]["message"]["content"][0]["text"]

    # Check if the image is related to the subject
    if "image is not related to subject" in response_text:
        return {
            'statusCode': 200,
            'body': json.dumps({'response': "image is not related to subject"})
        }

    # If related, provide the original response
    return {
        'statusCode': 200,
        'body': json.dumps({'response': response_text})
    }
